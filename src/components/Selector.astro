---
import { getLangFromUrl } from '../i18n/languagePicker'
interface Props {
	name: string
	href: string
}

const current_language = getLangFromUrl(Astro.url)

const { name, href } = Astro.props
let trailingSlash = ''
if (href !== '') trailingSlash = '/'
---

<style>
	.selector,
	.selector-background {
		position: absolute;
		clip-path: polygon(0 50%, 100% 50%, 100% 50%, 0 50%);
		transition-property: clip-path;
		transition-duration: 220ms;
		transition-timing-function: linear;
	}

	.selector {
		background-color: #663399;
	}

	.selector-background {
		background-color: #669933;
	}
</style>

<astro-selector>
	<div class="selector-background z-10"></div>
	<div class="selector z-10"></div>
	<a href=`/${current_language}/${href}${trailingSlash}` class="relative z-20"
		>{name}</a
	>
</astro-selector>

<script>
	import { COMPUTER_WIDTH_TRESHOLD } from '../constants/device_widths'
	class AstroSelector extends HTMLElement {
		constructor() {
			super()

			const selectors = this.getElementsByTagName('div')
			const link = this.querySelector('a') ?? handleLinkNotFound()

			function handleLinkNotFound(): never {
				throw new Error('Selected link not found')
			}

			function assignCoordinates() {
				for (const selector of selectors) {
					selector.style.clipPath = newCoordinates()
				}
			}

			function setPosition() {
				const { left, width, height, top } =
					link.getBoundingClientRect()
				const offsetX = width * 0.5
				const offsetY = height * 0.8
				for (const selector of selectors) {
					selector.style.left = `${Math.floor(left) - offsetX / 2}px`
					selector.style.width = `${Math.floor(width) + offsetX}px`
					selector.style.height = `${Math.floor(height) + offsetY}px`
					selector.style.top = `${window.scrollY + Math.floor(top) - offsetY / 2}px`
				}
			}

			function showSelector() {
				for (const selector of selectors) {
					selector.addEventListener(
						'transitionend',
						assignCoordinates,
					)
				}
				assignCoordinates()
				link.style.color = 'white'
			}

			function hideSelector() {
				for (const selector of selectors) {
					selector.removeEventListener(
						'transitionend',
						assignCoordinates,
					)
					selector.style.clipPath =
						'polygon(0 50%, 100% 50%, 100% 50%, 0 50%)'
				}
				link.style.color = ''
			}

			function newCoordinates() {
				function randomNumberWithin20() {
					return Math.floor(Math.random() * 15)
				}
				let coord = []
				for (let i = 0; i < 8; i++) {
					coord.push(randomNumberWithin20())
				}
				return `polygon(
          			${coord[0]}% ${coord[1]}%,
					${coord[2] + 85}% ${coord[3]}%,
					${coord[4] + 85}% ${coord[5] + 85}%,
					${coord[6]}% ${coord[7] + 85}%
          		)`
			}

			function handleResize() {
				setPosition()
				const is_computer =
					window.screen.width >= COMPUTER_WIDTH_TRESHOLD
				if (is_computer) {
					hideSelector()
				} else {
					showSelector()
				}
			}

			function setup() {
				link.addEventListener('mouseover', showSelector)
				link.addEventListener('mouseout', hideSelector)

				handleResize()
				$(window).on('resize', handleResize)
			}

			setup()
		}
	}

	customElements.define('astro-selector', AstroSelector)
</script>
